미니 블로그 만들기
- 글 목록 보기 기능(리스트 형태)
- 글 보기 기능
- 댓글 보기 기능
- 글 작성 기능
- 댓글 작성 기능

===========================================================

create-react-app을 사용해 프로젝트 생성
npx create-react-app mini-blog

react App 실행
cd mini-blog
npm start

===========================================================

블로그를 구성하는 컴포넌트들을 하나씩 붙여나갈 예정

===========================================================

시작 전에 필요한 패키지들을 다운로드
- react-router-dom v6
    : 리액트 앱에서 페이지 전환을 위해 사용하는 패키지. 필수적★
- styled-components v5
    : 스타일링을 위한 라이브러리

npm install --save react-router-dom styled-components
- --save
    : 지금 다운로드 하는 패키지들을 package.json 파일이 관리하는 
      의존성 목록(dependencies)에 저장하겠다는 의미

===========================================================

컴포넌트 구성하기
> 컴포넌트는 재사용을 위해 최대한 작게 쪼개서 만들기

- 글 목록 보기 기능(리스트 형태)
    > PostList, PostListItem

- 글 보기 기능
    > Post

- 댓글 보기 기능
    > CommentList, CommentListItem

- 글 작성 기능
    > PostWrite

- 댓글 작성 기능
    > CommentWrite

===========================================================

폴더 구성하기
> 폴더를 구성하는 이유는, 
  각 컴포넌트들을 적당한 폴더에 모아 관리함으로써 
  개발의 편의와 향후 유지보수가 용이하도록 하기 위해서이다.

> 폴더를 구성하는 방법에 정답은 없지만,
  다른 개발자와의 협업을 위해서 보편적으로 많이 사용하는 방식으로 구성

> 보통은 React 컴포넌트가 재사용 가능할 경우 종류별로 모아놓거나,
  각 페이지에서만 사용하고 딱히 재사용될 일이 없는 경우에는
  각 페이지별로 폴더를 만들고 그 안에 모아놓는다  

이번 프로젝트의 폴더 구성
src - component - list : 리스트와 관련된 컴포넌트들을 모아놓은 폴더
                - page : 페이지 컴포넌트들을 모아놓은 폴더
                - ui : UI 컴포넌트들을 모아놓은 폴더

===========================================================

컴포넌트 구현하기

프로젝트를 설계할 때는 탑다운 방식으로 큰 그림을 먼저 그리고
이후에 작은 부분을 구체화 하지만,
프로젝트를 구현할 때는 반대로 보통업 방식으로 작은 부분부터 구현한 후
작은 부분들을 모아 큰 부분을 완성하게 된다

그래서 큰 컴포넌트를 개발하기 전에 작은 컴포넌트부터 구현한다

필요한 UI 컴포넌트는?
- 버튼 컴포넌트
    : 글이나 댓글을 작성후 버튼을 눌러 저장하는 등의 상황에 필요
- 텍스트 인풋 컴포넌트
    : 사용자가 글이나 댓글을 작성할 수 있게 필요

===========================================================

각 페이지별로 경로 구성
> 페이지 컴포넌트들을 실제 웹브라우저에서 보이도록 각 경로에 맞게 매핑해주는 작업이 필요

리액트에서는 react-router-dom이라는 패키지를 이용해서 각 경로에 따라 다른 컴포넌트를 보여주도록 만든다

react-router-dom
> React를 위한 라우팅 라이브러리
> 라우트: 노선, 경로의 뜻을 갖고 있는데, 
          웹사이트에서 라우팅이라고 하면 사용자가 원하는 경로로 보내는 과정이라고 할 수 있음
> 이러한 라우팅을 쉽게 구현할 수 있도록 React 컴포넌트 형태로 제공해주는 라이브러리

> 라우팅 구성 예시
    <BrowserRouter>
        <Routes>
            <Route index element={<MainPage />} />
            <Route path="places" element={<PlacePage />} />
            <Route path="games" element={<GamePage />} />
        </Routes>
    </BrowserRouter>

    react-router-dom을 이용해 라우팅을 구성하기 위해서 사용하는 기본적인 컴포넌트는 BrowserRouter, Routes, Route 이렇게 3가지

    BrowserRouter 
        : 웹브라우저에서 React 라우터를 사용하여 라우팅을 할 수 있도록 해주는 컴포넌트
          웹브라우저에는 히스토리라는 기능이 내장되어 있어 사용자가 탐색한 페이지 방문기록이 저장됨
          그래서 웹브라우저의 뒤로가기 버튼을 누르면 이 히스토리를 이용해서 이전 페이지가 어디인지 찾고 해당 페이지로 이동하게 된다
          BrowserRouter 컴포넌트는 이 히스토리를 이용해서 경로를 탐색할 수 있게 해주는 컴포넌트

    Routes, Route
        : Routes와 Route 컴포넌트는 실제로 라우팅 경로를 구성할 수 있게 해주는 컴포넌트
          Routes 컴포넌트는 뒤에 -s가 붙어 복수를 나타내는 것처럼, 여러 개의 Route 컴포넌트를 Children으로 가진다

          Route 컴포넌트는 Routes 컴포넌트의 하위 컴포넌트로서 path와 element라는 props를 갖고 있다
          여기에서 path는 경로, element는 경로가 일치할 경우 렌더링을 할 리액트 Element를 의미

          사용자가 주소창에 새로운 경로를 입력하거나 웹사이트 내에서 경로 이동이 일어나게 되면, 
          Routes 컴포넌트는 하위 칠드런으로 갖고 있는 Route 컴포넌트 중에서 현재 경로와 가장 일치하는 경로를 찾아 
          해당되는 엘리먼트를 반환한다
          이 과정을 거쳐 사용자에게 보이는 화면이 바뀌게 됨

    경로값이 없이 그냥 사이트 메인으로 접속하게 되면 index라는 prop을 가진 라우트로 라우팅된다
    위 예제의 경우에는 MainPage가 렌더링되어 보이게 된다.

    또한 /places로 접속하면 PlacePage 컴포넌트가, /games로 접속하면 GamePage 컴포넌트가 렌더링되어 화면에 나오게 된다

> 페이지 간의 이동 : react-route-dom에서 제공하는 useNavigate() 훅 사용
    function Samplenavigate(props) {
        const navigate = useNavigate();

        const moveToMain = () => {
            // useNavigate() 훅의 호출 결과로 나오는 navigate 함수의 파라미터로 이동할 path를 넣어주면 된다
            // 여기서는 /
            navigate("/");
        };

        return(
            ...
        );
    }

> 참고. https://reactrouter.com


미니블로그에 라우팅 구성하기
라우팅은 app.js 파일에 포함되어 있는 app 컴포넌트에 구현되는데, 
app 컴포넌트가 가장 처음 렌더링 되는 컴포넌트이기 때문

===========================================================

React는 기본적으로 index.js 파일을 렌더링하게 되어 있음
그래서 이 부분에 처음 렌더링할 컴포넌트를 지정해줄 수 있음
Create React 앱으로 생성한 프로젝트에는 App 컴포넌트가 기본적으로 들어가 있음
때문에 App 컴포넌트에 라우팅 경로를 설정해 준 것
App 컴포넌트가 아닌 다른 컴포넌트를 import 해서 넣어도 된다

===========================================================

Production 빌드
> 빌드는 우리가 작성한 코드와 애플리케이션이 사용하는 
  이미지, CSS 파일 등을 모두 모아서 패키징 하는 과정
> 빌드 과정에서는 코드가 식별이 불가능하도록 난독화가 되기도 하고(obfuscation),
  필요없는 공백이나 줄 바꿈 문자들을 제거하는 축소과정(minification)도 포함됨
> 이렇게 최종적으로 만들어진 파일은 빌드 폴더에 모이게 된다

npm run build : 빌드 진행 명령어. 완료된 후 빌드 폴더가 생성된다

완료된 빌드 폴더 내에는 index.html 파일, 이미지, CSS 파일, 자바스크립트 번들 파일이 
static 폴더 안에 각각 들어가 있게 된다

===========================================================

생성된 빌드 파일들을 이용해서 웹 애플리케이션 실행하는 방법

serve 패키지 설치
> 이름 그대로 static 파일들을 서빙해주는 역할을 함

npm install -g serve
> -g 옵션을 넣어 글로벌 모드로 설치
  글로벌 모드로 설치하면 현재 프로젝트 폴더뿐만 아니라
  사용 중인 컴퓨터의 다른 경로 어디에서든지 사용할 수 있게 됨

serve -s build
> 빌드 폴더를 기반으로 웹 애플리케이션을 서빙
> serve가 정상적으로 실행되면 터미널에 초록색 상자가 출력됨
> 초록색 상자 안의 주소로 접속하게 되면 개발 모드에서 실행할 때와 동일한 미니 블로그를 볼 수 있다

===========================================================

배포
> 빌드를 통해 생성된 정적인 파일들을 배포하려는 서버에 올리는 과정

서버에 올려두고 serve 같은 명령어를 사용하여 서빙할 수 있게 해두면,
인터넷이 되는 어디에서든지 해당 서버 주소로 접속하여 미니 블로그를 볼 수 있게 된다